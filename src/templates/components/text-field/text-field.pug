//-
  label - label for text field
  state - text, that marks the state of the input
  btn - object with settings for field's button
    icon - buttons's icon
    color - button's color
    btnType - buttons's type
  isActive - deifnes, whether input active or not
  isEachBorderRounded - defines, whether each border rounded or not
  type - input's type
  name - input's name
  value - input's value
  placeholder - input's placeholder
    text - placceholder's text
    isDark - defiens, whether placeholder text's color is dark or not
  isRequired - defines, whether text filed's input is required or not
  isDisabled - defines, whether text field's input diabled or not
  mask - defines the value of data-mask attribute

mixin text-field(options)
  if !options
    - options = {}

  - const {label, state, btn: {icon, color, btnType = "button"} = {}, isActive, isEachBorderRounded = true, type = "text", name, value, placeholder : {text, isUppercase, isDark} = {}, isRequired, isDisabled, mask} = options

  .text-field
    label.text-field__container
      if label 
        span.text-field__label= label 
          if state 
            span.text-field__state= state
      span.text-field__input-container
        input.text-field__input(
          class = isActive ? "text-field__input_active" : "",
          class = (btn !== {}) ? "text-field__input_padding-right_big" : "",
          class = isEachBorderRounded ? "text-field__input_each-border_rounded" : "",
          class = isDark ? "text-field__input_placeholder_darkshade_75" : "",
          class = isUppercase ? "text-field__input_placeholder_with_uppercase" : "",
          type = type, 
          name = name, 
          value = value,
          placeholder = text, 
          required = isRequired,
          disabled = isDisabled,
          spellcheck = "false",
          data-mask = mask
        )
        if btn !== {}
          button.text-field__button(class = (color === "gradient") ? "text-field__button_gradient" : "", type = btnType)= icon
