include ../main-button/main-button

mixin dropdown(options)
  if !options
    - options = {}

  - const {isBig, isExpanded, isRequired, isInputBorderRounded, contentName, label, state, inputName = contentName, inputPlaceholder, inputValue, menuItems} = options

  .dropdown(
    class = isBig ? "dropdown_big" : "",
    class = isExpanded ? "dropdown_expanded" : "",
    data-content = contentName
  )
    .dropdown__wrapper
      label.dropdown__field
        if label
          span.dropdown__label= label 
            if state 
              span.dropdown__state= state
        span.dropdown__input(class = isInputBorderRounded ? "dropdown__input_border_rounded" : "")
          input.dropdown__input-element(type = "text", name = inputName, placeholder = inputPlaceholder, value = inputValue, required = isRequired, disabled)
      .dropdown__menu 
        .dropdown__menu-wrapper 
          ul.dropdown__menu-items
            - let totalCount = 0
            each item in menuItems 
              - totalCount += +item.count
              li.dropdown__item(data-count = item.count)
                .dropdown__item-subtitle= item.subtitle 
                .dropdown__item-calculator 
                  button.dropdown__item-button-minus(disabled = +item.count < 1 ? true : false, type = "button")= "-"
                  span.dropdown__item-counter= item.count
                  button.dropdown__item-button-plus(disabled = +item.count > 4 ? true : false, type = "button")= "+"
          if isBig 
            .dropdown__buttons 
              .dropdown__button-clear(class = (totalCount === 0) ? "dropdown__button-clear_hidden" : "")
                +main-button({style: "simple", text: "очистить"})
              .dropdown__button-apply
                +main-button({style: "simple", text: "применить"})